/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.ApiError;
import org.springframework.format.annotation.DateTimeFormat;
import org.openapitools.model.ErrorDto;
import org.openapitools.model.GenericInternalServerErrorDto;
import java.time.LocalDate;
import org.openapitools.model.RechercherMiesResponseDto;
import org.openapitools.model.TrouverUserResponseDto;
import org.openapitools.model.UpdateEimsRequestDto;
import org.openapitools.model.UserDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-08-11T14:56:49.312778+02:00[Europe/Paris]", comments = "Generator version: 7.6.0")
@Validated
@Tag(name = "rechercher-user-controller", description = "the rechercher-user-controller API")
public interface PsiApi {

    /**
     * POST /user : Crée l&#39;utilisateur au SEC PSC à partir de ses traits d&#39;identité
     *
     * @param userDto  (required)
     * @return Utilisateur créé (status code 201)
     *         or Données invalides ou absentes (status code 400)
     *         or Utilisateur non autorisé (status code 401)
     *         or Utilisateur non trouvé (status code 404)
     *         or Conflits (status code 409)
     *         or Erreur interne serveur (status code 500)
     */
    @Operation(
        operationId = "creerUser",
        summary = "Crée l'utilisateur au SEC PSC à partir de ses traits d'identité",
        tags = { "rechercher-user-controller" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Utilisateur créé"),
            @ApiResponse(responseCode = "400", description = "Données invalides ou absentes", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "401", description = "Utilisateur non autorisé", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Utilisateur non trouvé", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "409", description = "Conflits", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "500", description = "Erreur interne serveur", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GenericInternalServerErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/user",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> creerUser(
        @Parameter(name = "UserDto", description = "", required = true) @Valid @RequestBody UserDto userDto
    );


    /**
     * GET /user/eims : Récupère la liste des MIE et la liste des autres ids d&#39;un utilisateur par son id national
     *
     * @param nationalId  (required)
     * @return Utilisateur trouvé (status code 200)
     *         or Données invalides ou absentes (status code 400)
     *         or Utilisateur non autorisé (status code 401)
     *         or Utilisateur non trouvé (status code 404)
     *         or L&#39;utilisateur avec cet identifiant national existe déjà (status code 409)
     *         or Erreur interne serveur (status code 500)
     */
    @Operation(
        operationId = "rechercherEims",
        summary = "Récupère la liste des MIE et la liste des autres ids d'un utilisateur par son id national",
        tags = { "rechercher-user-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Utilisateur trouvé", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RechercherMiesResponseDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Données invalides ou absentes", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "401", description = "Utilisateur non autorisé", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Utilisateur non trouvé", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "409", description = "L'utilisateur avec cet identifiant national existe déjà", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "500", description = "Erreur interne serveur", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GenericInternalServerErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/user/eims",
        produces = { "application/json" }
    )
    
    ResponseEntity<RechercherMiesResponseDto> rechercherEims(
        @NotNull @Parameter(name = "nationalId", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "nationalId", required = true) String nationalId
    );


    /**
     * GET /user : Retourne la personne (si trouvée) au SEC PSC sur la base de son id national
     *
     * @param nationalId  (required)
     * @return Personne trouvée (status code 200)
     *         or Données invalides ou absentes (status code 400)
     *         or Utilisateur non autorisé (status code 401)
     *         or Utilisateur non trouvé (status code 404)
     *         or L&#39;utilisateur avec cet identifiant national existe déjà (status code 409)
     *         or Erreur interne serveur (status code 500)
     */
    @Operation(
        operationId = "rechercherParIdNational",
        summary = "Retourne la personne (si trouvée) au SEC PSC sur la base de son id national",
        tags = { "rechercher-user-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Personne trouvée", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TrouverUserResponseDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Données invalides ou absentes", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "401", description = "Utilisateur non autorisé", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Utilisateur non trouvé", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "409", description = "L'utilisateur avec cet identifiant national existe déjà", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "500", description = "Erreur interne serveur", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GenericInternalServerErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/user",
        produces = { "application/json" }
    )
    
    ResponseEntity<TrouverUserResponseDto> rechercherParIdNational(
        @NotNull @Parameter(name = "nationalId", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "nationalId", required = true) String nationalId
    );


    /**
     * GET /user/traitsidentite : Retourne la/les personne/s (si trouvées) au SEC PSC sur la base de ses traits d&#39;identité
     *
     * @param lastName  (required)
     * @param firstNames  (required)
     * @param genderCode  (required)
     * @param birthdate  (required)
     * @param birthTownCode  (required)
     * @param birthCountryCode  (required)
     * @return Personne/s trouvée/s (status code 200)
     *         or Données invalides ou absentes (status code 400)
     *         or Utilisateur non autorisé (status code 401)
     *         or Utilisateur non trouvé (status code 404)
     *         or Conflits (status code 409)
     *         or Erreur interne serveur (status code 500)
     */
    @Operation(
        operationId = "rechercherParTraitsIdentite1",
        summary = "Retourne la/les personne/s (si trouvées) au SEC PSC sur la base de ses traits d'identité",
        tags = { "rechercher-user-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Personne/s trouvée/s", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TrouverUserResponseDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Données invalides ou absentes", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "401", description = "Utilisateur non autorisé", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Utilisateur non trouvé", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "409", description = "Conflits", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "500", description = "Erreur interne serveur", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GenericInternalServerErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/user/traitsidentite",
        produces = { "application/json" }
    )
    
    ResponseEntity<TrouverUserResponseDto> rechercherParTraitsIdentite1(
        @NotNull @Parameter(name = "lastName", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "lastName", required = true) String lastName,
        @NotNull @Parameter(name = "firstNames", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "firstNames", required = true) String firstNames,
        @NotNull @Parameter(name = "genderCode", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "genderCode", required = true) String genderCode,
        @NotNull @Parameter(name = "birthdate", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "birthdate", required = true) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate birthdate,
        @NotNull @Parameter(name = "birthTownCode", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "birthTownCode", required = true) String birthTownCode,
        @NotNull @Parameter(name = "birthCountryCode", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "birthCountryCode", required = true) String birthCountryCode
    );


    /**
     * PUT /user/eims : Met à jour la liste des MIE et autres identifiants d&#39;un utilisateur par son id national
     *
     * @param nationalId  (required)
     * @param updateEimsRequestDto  (required)
     * @return MIE mis à jour (status code 200)
     *         or Données invalides ou absentes (status code 400)
     *         or Utilisateur non autorisé (status code 401)
     *         or Utilisateur non trouvé (status code 404)
     *         or L&#39;utilisateur avec cet identifiant national existe déjà (status code 409)
     *         or Erreur interne serveur (status code 500)
     */
    @Operation(
        operationId = "updateEims",
        summary = "Met à jour la liste des MIE et autres identifiants d'un utilisateur par son id national",
        tags = { "rechercher-user-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "MIE mis à jour"),
            @ApiResponse(responseCode = "400", description = "Données invalides ou absentes", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "401", description = "Utilisateur non autorisé", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Utilisateur non trouvé", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "409", description = "L'utilisateur avec cet identifiant national existe déjà", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "500", description = "Erreur interne serveur", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GenericInternalServerErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/user/eims",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> updateEims(
        @NotNull @Parameter(name = "nationalId", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "nationalId", required = true) String nationalId,
        @Parameter(name = "UpdateEimsRequestDto", description = "", required = true) @Valid @RequestBody UpdateEimsRequestDto updateEimsRequestDto
    );
}
